<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Admin Dashboard | By Code Info</title>
  <link rel="stylesheet" href="style.css" />
  <!-- Font Awesome Cdn Link -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" />
</head>
<body>
  <header class="header">
    <div class="logo">
      <a href="#">ScaleCap</a>
      <div class="search_box">
        <input type="text" placeholder="Search ScaleCap">
        <i class="fa-sharp fa-solid fa-magnifying-glass"></i>
      </div>
    </div>

    <div class="header-icons">
      <i class="fas fa-bell"></i>
      <div class="account">
        <img src="images.png" alt="">
        <h4>Jhon Viek</h4>
      </div>
    </div>
  </header>
  <div class="container">
    <nav>
      <div class="side_navbar">
        <span>Main Menu</span>
        <a href="#" class="active">Dashboard</a>
        <a href="#">Profile</a>
        <a href="#">History</a>
        <a href="#">Application</a>
        <a href="#">My Account</a>
        <a href="#">Documents</a>

        <div class="links">
          <span>Quick Link</span>
          <a href="#">Paypal</a>
          <a href="#">EasyPay</a>
          <a href="#">SadaPay</a>
        </div>
      </div>
    </nav>

    <div class="main-body">
      <h2>Dashboard</h2>
      <div class="promo_card">
        <h1>Welcome to EasyPay</h1>
        <span>Lorem ipsum dolor sit amet.</span>
        <button>Learn More</button>
      </div>
      
      <div class="history_lists">
        <div id="property-details"></div>
          <div id="property-1"></div>
      </div>

      <!-- Add an input field and a button to trigger the pop-up modal -->
      <input type="text" id="property-id-input" placeholder="Enter Property ID">
      <button id="show-property-modal">Show Property Details</button>

      <!-- Popup Modal -->
      <div id="property-popup-modal" class="modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <h2>Property Details</h2>
          <div id="property-details-popup"></div>
        </div>
      </div>

      <!-- Add logout button here -->
      <button id="logout-btn">Logout</button>
    </div>
    <div class="sidebar">
       <h4>Account Balance</h4> 
      
      <div class="balance">
        <i class="fas fa-dollar icon"></i>
        <div class="info">
          <h5>Dollar</h5>
          <span><i class="fas fa-dollar"></i>25,000.00</span>
        </div>
      </div>
      
      <div class="balance">
        <i class="fa-solid fa-rupee-sign icon"></i>
        <div class="info">
          <h5>PKR</h5>
          <span><i class="fa-solid fa-rupee-sign"></i>300,000.00</span>
        </div>
      </div>

      <div class="balance">
        <i class="fas fa-euro icon"></i>
        <div class="info">
          <h5>Euro</h5>
          <span><i class="fas fa-euro"></i>25,050.00</span>
        </div>
      </div>

      <div class="balance">
        <i class="fa-solid fa-indian-rupee-sign icon"></i>
        <div class="info">
          <h5>INR</h5>
          <span><i class="fa-solid fa-indian-rupee-sign"></i>220,000.00</span>
        </div>
      </div>

      <div class="balance">
        <i class="fa-solid fa-sterling-sign icon"></i>
        <div class="info">
          <h5>Pound</h5>
          <span><i class="fa-solid fa-sterling-sign"></i>30,000.00</span>
        </div>
      </div>

      <button id="show-modal">Show Modal</button>
    </div>
  </div>
  <script src="script.js"></script>
  <!-- <script src="frontend.js"></script> -->
  <script src="pop-up.js"></script>
  
  <script>
    const BASE_URL = "http://localhost:4000";

    document.getElementById('logout-btn').addEventListener('click', function() {
      // Redirect to logout endpoint
      window.location.href = '/logout';
    });

  </script>
  <script>
    
    document.addEventListener("DOMContentLoaded", function () {
      const showModalButton = document.getElementById("show-property-modal");
      const popupModal = document.getElementById("property-popup-modal");
      const propertyDetailsPopup = document.getElementById("property-details-popup");
      const propertyIdInput = document.getElementById("property-id-input");

      showModalButton.addEventListener("click", function () {
        const propertyId = propertyIdInput.value;

        // Fetch property details from backend API
        fetch(BASE_URL + `/properties/${propertyId}`)
          .then((response) => response.json())
          .then((property) => {
            // Populate property details in the pop-up modal
            propertyDetailsPopup.innerHTML = `
              <p>ID: ${property.id}</p>
              <p>Name: ${property.name}</p>
              <p>Description: ${property.description}</p>
              <!-- Add more details as needed -->
            `;

            // Show the pop-up modal
            popupModal.style.display = "block";
          })
          .catch((error) =>
            console.error("Error fetching property details:", error)
          );
      });

      // Close the pop-up modal when the close button is clicked
      document.querySelector(".close").addEventListener("click", function () {
        popupModal.style.display = "none";
      });
    });
  </script>
</body>
</html>



















const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const properties = require('./propertiesData');
const users = require('./users');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const session = require('express-session');
const bcrypt = require('bcrypt');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 4000;

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cors());
app.use(session({ secret: process.env.SESSION_SECRET || 'secret', resave: false, saveUninitialized: false }));
app.use(passport.initialize());
app.use(passport.session());

// Serve static files from the 'frontend' directory
app.use(express.static(path.join(__dirname, '..', 'frontend')));

// Configure passport
passport.use(new LocalStrategy(
    (username, password, done) => {
        const user = users.find(u => u.username === username);
        if (!user) return done(null, false, { message: 'Incorrect username' });
        bcrypt.compare(password, user.password, (err, result) => {
            if (err) return done(err);
            if (!result) return done(null, false, { message: 'Incorrect password' });
            return done(null, user);
        });
    }
));

passport.serializeUser((user, done) => {
    done(null, user.id);
});

passport.deserializeUser((id, done) => {
    const user = users.find(u => u.id === id);
    done(null, user);
});

// Routes
app.get('/', (req, res) => {
    res.redirect('/login');
});

app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'frontend', 'login.html'));
});

app.post('/login', passport.authenticate('local', { failureRedirect: '/login' }), (req, res) => {
    res.redirect('/index.html');
});

app.get('/profile', isAuthenticated, (req, res) => {
    res.send(`Welcome ${req.user.name}`);
});

app.get('/logout', (req, res) => {
    req.logout();
    res.redirect('/');
});

// Authentication middleware
function isAuthenticated(req, res, next) {
    if (req.isAuthenticated()) {
        return next();
    }
    res.redirect('/login');
}

// Routes for property management
app.get('/properties', (req, res) => {
    res.json(properties);
});

app.get('/properties/:propertyId', (req, res) => {
    const propertyId = req.params.propertyId;
    const property = properties.find(property => property.id === parseInt(propertyId));
    if (property) {
        res.json(property);
    } else {
        res.status(404).json({ message: "Property not found" });
    }
});

app.post('/properties', (req, res) => {
    const property = req.body;
    properties.push(property);
    res.status(201).json(property);
});

app.put('/properties/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const updatedProperty = req.body;
    const index = properties.findIndex(property => property.id === id);
    if (index !== -1) {
        properties[index] = updatedProperty;
        res.json(updatedProperty);
    } else {
        res.status(404).json({ message: 'Property not found' });
    }
});

app.delete('/properties/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const index = properties.findIndex(property => property.id === id);
    if (index !== -1) {
        properties.splice(index, 1);
        res.json({ message: 'Property deleted successfully' });
    } else {
        res.status(404).json({ message: 'Property not found' });
    }
});

// Serve index.html as dashboard
app.get('/login', isAuthenticated, (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'frontend', 'index.html'));
});


app.get('/property-details.html',  (req, res) => {
    // Read the contents of the HTML file
    fs.readFile(path.join(__dirname, '..', 'frontend', 'property-details.html'), 'utf8', (err, data) => {
        if (err) {
            // If there's an error reading the file, send a 500 error response
            console.error('Error reading file:', err);
            res.status(500).send('Internal Server Error');
        } else {
            // If the file is successfully read, send its contents as the response
            res.send(data);
        }
    });
});


// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
